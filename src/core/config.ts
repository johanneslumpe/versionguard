import path from 'path';
import fs from 'fs';
import json5 from 'json5';
import findUp from 'find-up';

import { emphasize } from './utils';
import { GroupConfig } from './groups/add';
import { Dictionary } from './types';
import { VersionGuardError } from './errors';

const JSON_HEADER =
  '// This file was auto-generated by `versionguard`. Do not manually modify, use the `version-guard` CLI instead.';
export const CONFIG_FILENAME = '.versionguardrc.json';

export type VersionGuardConfig = Dictionary<GroupConfig>;

export function getConfigPathForBase(basePath: string): string {
  return path.resolve(basePath, CONFIG_FILENAME);
}

export async function findConfig(): Promise<string | undefined> {
  return findUp(CONFIG_FILENAME);
}

export async function readConfig(
  configPath: string,
): Promise<VersionGuardConfig> {
  try {
    const fileContent = await fs.promises.readFile(configPath);
    const config = json5.parse(fileContent.toString());
    return config;
  } catch (e) {
    throw new VersionGuardError(
      emphasize`Config file at path "${configPath}" is corrupted. Cannot proceed.`,
    );
  }
}

export function writeConfig(
  path: string,
  data: VersionGuardConfig,
): Promise<void> {
  return fs.promises.writeFile(
    path,
    `${JSON_HEADER}
  ${json5.stringify(data)}`,
  );
}
